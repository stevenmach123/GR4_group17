names(evl2006)[names(evl2006)=="S6"] <- "Room6"
names(evl2006)[names(evl2006)=="S7"] <- "Room7"
noons <- subset(evl2006, Hour == 12)
listNames <- c(colnames(allData))
listNames2 <- listNames[listNames != "Hour"]
listNames3 <- listNames2[listNames2 != "newDate"]
years<-c(2005:2016)
ui <- fluidPage(
fluidRow(
column(4,
selectInput("Year", "Select the year to visualize", years, selectize=FALSE)
),
column(4,
selectInput("Room", "Select the room to visualize", listNames3, selectize=FALSE)
)
),
fluidRow(
plotOutput("hist1"),plotOutput("hist2")
)
)
server <- function(input, output) {
output$hist1 <- renderPlot({
justOneYear <- subset(allData, year(allData$newDate) == input$Year)
ggplot(justOneYear, aes(x=newDate, y=justOneYear[,input$Room]))  +  labs(title="Room Temperature", x="Day", y = "Degrees F") + geom_point() + coord_cartesian(ylim = c(60,90))
})
output$hist2 <- renderPlot({
#break up the full dataset and grab the appropriate input$Year, then grab the noon values
newNoons <- subset(allData, year(allData$newDate) == input$Year & Hour == 12)
ggplot(newNoons, aes(x=newDate, y=newNoons[,input$Room])) +  labs(title="Room Temperature at noon", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(60,90))
#works
#ggplot(noons, aes(x=newDate, y=noons[,input$Room])) +  labs(title="Room Temperature at noon", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(60,90))
})
}
shinyApp(ui = ui, server = server)
rm(list=ls())
# sample R + Shiny example for CS 424 Spring 2018 UIC - Andy Johnson
# convert the top chart to be date vs hour for that room to re-create the heat map viz
# combine existing two to show noon and the min / max per day
# clean up the 2006 specific code and eventually try and create loops for all the years
# maybe have a set of check boxes to show more than one room at the same time
# also try and create pie charts for each room by temp, bar charts for each room by temp, and box and whisker charts showing all rooms for the data
#and look into doinf john snow cholera data as projet 1 - can I plot X/Y values onto a backdrop of my choosing?
library(shiny)
library(lubridate)
evl2005 <- read.table(file = "history_2005.tsv", sep = "\t", header = TRUE)
evl2006 <- read.table(file = "history_2006.tsv", sep = "\t", header = TRUE)
evl2007 <- read.table(file = "history_2007.tsv", sep = "\t", header = TRUE)
evl2008 <- read.table(file = "history_2008.tsv", sep = "\t", header = TRUE)
evl2009 <- read.table(file = "history_2009.tsv", sep = "\t", header = TRUE)
evl2010 <- read.table(file = "history_2010.tsv", sep = "\t", header = TRUE)
evl2011 <- read.table(file = "history_2011.tsv", sep = "\t", header = TRUE)
evl2012 <- read.table(file = "history_2012.tsv", sep = "\t", header = TRUE)
evl2013 <- read.table(file = "history_2013.tsv", sep = "\t", header = TRUE)
evl2014 <- read.table(file = "history_2014.tsv", sep = "\t", header = TRUE)
evl2015 <- read.table(file = "history_2015.tsv", sep = "\t", header = TRUE)
evl2016 <- read.table(file = "history_2016.tsv", sep = "\t", header = TRUE)
allData <- rbind(evl2005, evl2006, evl2007, evl2008, evl2009, evl2010, evl2011, evl2012, evl2013, evl2014, evl2015, evl2016)
evl2006$newDate<- as.Date(evl2006$Date, "%m/%d/%Y")
evl2006$Date <- NULL
allData$newDate <- as.Date(allData$Date, "%m/%d/%Y")
allData$Date <- NULL
names(allData)[names(evl2006)=="S1"] <- "Room1"
names(allData)[names(evl2006)=="S2"] <- "Room2"
names(allData)[names(evl2006)=="S3"] <- "Room3"
names(allData)[names(evl2006)=="S4"] <- "Room4"
names(allData)[names(evl2006)=="S5"] <- "Room5"
names(allData)[names(evl2006)=="S6"] <- "Room6"
names(allData)[names(evl2006)=="S7"] <- "Room7"
names(evl2006)[names(evl2006)=="S1"] <- "Room1"
names(evl2006)[names(evl2006)=="S2"] <- "Room2"
names(evl2006)[names(evl2006)=="S3"] <- "Room3"
names(evl2006)[names(evl2006)=="S4"] <- "Room4"
names(evl2006)[names(evl2006)=="S5"] <- "Room5"
names(evl2006)[names(evl2006)=="S6"] <- "Room6"
names(evl2006)[names(evl2006)=="S7"] <- "Room7"
noons <- subset(evl2006, Hour == 12)
listNames <- c(colnames(allData))
listNames2 <- listNames[listNames != "Hour"]
listNames3 <- listNames2[listNames2 != "newDate"]
years<-c(2005:2016)
ui <- fluidPage(
fluidRow(
column(4,
selectInput("Year", "Select the year to visualize", years, selectize=FALSE)
),
column(4,
selectInput("Room", "Select the room to visualize", listNames3, selectize=FALSE)
)
),
fluidRow(
plotOutput("hist1"),plotOutput("hist2")
)
)
server <- function(input, output) {
output$hist1 <- renderPlot({
justOneYear <- subset(allData, year(allData$newDate) == input$Year)
ggplot(justOneYear, aes(x=newDate, y=justOneYear[,input$Room]))  +  labs(title="Room Temperature", x="Day", y = "Degrees F") + geom_point() + coord_cartesian(ylim = c(60,90))
})
output$hist2 <- renderPlot({
#break up the full dataset and grab the appropriate input$Year, then grab the noon values
newNoons <- subset(allData, year(allData$newDate) == input$Year & Hour == 12)
ggplot(newNoons, aes(x=newDate, y=newNoons[,input$Room])) +  labs(title="Room Temperature at noon", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(60,90))
#works
#ggplot(noons, aes(x=newDate, y=noons[,input$Room])) +  labs(title="Room Temperature at noon", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(60,90))
})
}
shinyApp(ui = ui, server = server)
# sample R + Shiny example for CS 424 Spring 2018 UIC - Andy Johnson
# convert the top chart to be date vs hour for that room to re-create the heat map viz
# combine existing two to show noon and the min / max per day
# clean up the 2006 specific code and eventually try and create loops for all the years
# maybe have a set of check boxes to show more than one room at the same time
# also try and create pie charts for each room by temp, bar charts for each room by temp, and box and whisker charts showing all rooms for the data
#and look into doinf john snow cholera data as projet 1 - can I plot X/Y values onto a backdrop of my choosing?
library(shiny)
library(lubridate)
evl2005 <- read.table(file = "history_2005.tsv", sep = "\t", header = TRUE)
evl2006 <- read.table(file = "history_2006.tsv", sep = "\t", header = TRUE)
evl2007 <- read.table(file = "history_2007.tsv", sep = "\t", header = TRUE)
evl2008 <- read.table(file = "history_2008.tsv", sep = "\t", header = TRUE)
evl2009 <- read.table(file = "history_2009.tsv", sep = "\t", header = TRUE)
evl2010 <- read.table(file = "history_2010.tsv", sep = "\t", header = TRUE)
evl2011 <- read.table(file = "history_2011.tsv", sep = "\t", header = TRUE)
evl2012 <- read.table(file = "history_2012.tsv", sep = "\t", header = TRUE)
evl2013 <- read.table(file = "history_2013.tsv", sep = "\t", header = TRUE)
evl2014 <- read.table(file = "history_2014.tsv", sep = "\t", header = TRUE)
evl2015 <- read.table(file = "history_2015.tsv", sep = "\t", header = TRUE)
evl2016 <- read.table(file = "history_2016.tsv", sep = "\t", header = TRUE)
allData <- rbind(evl2005, evl2006, evl2007, evl2008, evl2009, evl2010, evl2011, evl2012, evl2013, evl2014, evl2015, evl2016)
evl2006$newDate<- as.Date(evl2006$Date, "%m/%d/%Y")
evl2006$Date <- NULL
allData$newDate <- as.Date(allData$Date, "%m/%d/%Y")
allData$Date <- NULL
names(allData)[names(evl2006)=="S1"] <- "Room1"
names(allData)[names(evl2006)=="S2"] <- "Room2"
names(allData)[names(evl2006)=="S3"] <- "Room3"
names(allData)[names(evl2006)=="S4"] <- "Room4"
names(allData)[names(evl2006)=="S5"] <- "Room5"
names(allData)[names(evl2006)=="S6"] <- "Room6"
names(allData)[names(evl2006)=="S7"] <- "Room7"
names(evl2006)[names(evl2006)=="S1"] <- "Room1"
names(evl2006)[names(evl2006)=="S2"] <- "Room2"
names(evl2006)[names(evl2006)=="S3"] <- "Room3"
names(evl2006)[names(evl2006)=="S4"] <- "Room4"
names(evl2006)[names(evl2006)=="S5"] <- "Room5"
names(evl2006)[names(evl2006)=="S6"] <- "Room6"
names(evl2006)[names(evl2006)=="S7"] <- "Room7"
noons <- subset(evl2006, Hour == 12)
listNames <- c(colnames(allData))
listNames2 <- listNames[listNames != "Hour"]
listNames3 <- listNames2[listNames2 != "newDate"]
years<-c(2005:2016)
ui <- fluidPage(
fluidRow(
column(4,
selectInput("Year", "Select the year to visualize", years, selectize=FALSE)
),
column(4,
selectInput("Room", "Select the room to visualize", listNames3, selectize=FALSE)
)
),
fluidRow(
plotOutput("hist1"),plotOutput("hist2")
)
)
server <- function(input, output) {
output$hist1 <- renderPlot({
justOneYear <- subset(allData, year(allData$newDate) == input$Year)
ggplot(justOneYear, aes(x=newDate, y=justOneYear[,input$Room]))  +  labs(title="Room Temperature", x="Day", y = "Degrees F") + geom_point() + coord_cartesian(ylim = c(60,90))
})
output$hist2 <- renderPlot({
#break up the full dataset and grab the appropriate input$Year, then grab the noon values
newNoons <- subset(allData, year(allData$newDate) == input$Year & Hour == 12)
ggplot(newNoons, aes(x=newDate, y=newNoons[,input$Room])) +  labs(title="Room Temperature at noon", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(60,90))
#works
#ggplot(noons, aes(x=newDate, y=noons[,input$Room])) +  labs(title="Room Temperature at noon", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(60,90))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/R for 424?/evltemps')
runApp('Desktop/R for 424?/evltemps')
runApp('Desktop/R for 424?/evltemps')
shiny::runApp('Desktop/R for 424?/evltemps')
runApp('Desktop/R for 424?/evltemps')
shiny::runApp('Downloads/evlWeatherForR')
runApp('Downloads/evlWeatherForR')
getwd()
getwd()
dir
ls
dir
dir()
getwd()
scatterplotMatrix ( ∼ mpg + disp + hp + drat + wt + qsec , data = mtcars )
pairs ( ∼ mpg + disp + hp + drat + wt + qsec , data = mtcars )
parcoord ( mtcars [ , c (" mpg " ," disp " ," hp " ," drat " , " wt " ," qsec ")])
parcoord
parcoord(state.x77[, c(7, 4, 6, 2, 5, 3)])
parcoord
pairs
attach(mtcars)
pairs(~mpg+disp+drat+wt,data=mtcars)
mtcars
pairs(~mpg+cyl+wt,data=mtcars)
pairs(~mpg+cyl+wt+hp,data=mtcars)
parcoord
library(MASS)
data(iris)
my_colors=colors()[as.numeric(iris$Species)*11]
parcoord(iris[,c(1:4)] , col= my_colors  )
my_colors=colors()[as.numeric(mtcars$gear)*11]
parcoord(mtcars[,c(1:8)] , col= my_colors )
my_colors=colors()[as.numeric(mtcars$gear)*4]
parcoord(mtcars[,c(1:8)] , col= my_colors )
datasets()
data()
data(AirPassengers)
AirPassengers
LakeHuron
airmiles
cars
faithful
Cars93
UScereal
scatterplotMatrix ( ∼ calories + protein + sugars + vitamins, data = UScereal)
scatterplotMatrix ( ∼calories + protein + sugars + vitamins, data = UScereal)
scatterplotMatrix ( ∼calories + protein + sugars + vitamins, data = UScereal)
UScereal
summary(UScereal)
scatterplotMatrix ( ∼calories + protein + sugars + vitamins, data = UScereal)
scatterplotMatrix (∼calories + protein, data = UScereal)
data=UScereal
scatterplotMatrix (∼calories + protein, data = data)
scatterplotMa  trix()
scatterplotMatrix(~mpg+disp+drat|cyl, data=data , reg.line="" , smoother="", col=my_colors , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
scatterplotMatrix(~mpg+disp+drat|cyl, data=data)
scatterplotMatrix ( ∼ mpg + disp + hp + drat + wt + qsec , data = mtcars )
pairs ( ∼ mpg + disp + hp + drat + wt + qsec , data = mtcars )
my_colors=colors()[as.numeric(iris$Species)*11]
parcoord(iris[,c(1:4)] , col= my_colors  )
pairs ( ∼ mpg + disp + hp + drat + wt + qsec , data = mtcars )
pairs(~mpg+disp+drat|cyl, data=data)
pairs ( ∼ mpg + disp + hp + drat + wt + qsec , data = mtcars )
pairs (∼calories + protein, data = UScereal)
pairs (∼calories + protein, data = UScereal)
pairs(~mpg+disp+drat+wt,data=mtcars,
main="Simple Scatterplot Matrix")
pairs(~mpg+disp+drat+wt,data=mtcars)
pairs (∼calories+protein,data=UScereal)
pairs(∼calories+protein,data=UScereal)
pairs(~mpg+disp+drat+wt,data=mtcars)
pairs(~mpg+disp+drat+wt,data=UScereal)
pairs(~calories,data=UScereal)
pairs(~calories+protein,data=UScereal)
pairs(~calories+protein+sugars,data=UScereal)
pairs(~calories+protein+sugars+vitamins,data=UScereal)
summary(UScereal)
pairs(~calories+protein+sugars+potassium+carbo,data=UScereal)
summary(Cars93)
pairs(~Weight+RPM+MPG.city,data=Cars93)
pairs(~Weight+RPM+MPG.city+Manufacturer,data=Cars93)
parcoord ( mtcars [ , c (" Weight " ," RPM " ," MPG.city " ," Manufacturer ")])
parcoord ( Cars93 [ , c (" Weight " ," RPM " ," MPG.city " ," Manufacturer ")])
parcoord ( Cars93 [ , c (" Weight " ," RPM " ," MPG.city " ," Manufacturer ")])
parcoord ( mtcars [ , c (" mpg " ," disp " ," hp " ," drat " , " wt " ," qsec ")])
parcoord ( mtcars [ , c (mpg,disp,hp,drat,wt,qsec)])
parcoord ( mtcars [ , c (" mpg " ," disp " ," hp " ," drat " , " wt " ," qsec ")])
parcoord()
parcoord(mtcars)
parcoord(Cars93)
parcoord(mtcars)
summary(Cars93)
parcoord(mtcars)
parcoord ( mtcars [ , c (" mpg " ," disp " ," hp " ," drat " , " wt " ," qsec ")])
parcoord(mtcars [, c(mpg, disp)])
parcoord(mtcars [, c(mpg, disp)])
summary(mtcars)
parcoord(mtcars [, c("mpg", "disp")])
parcoord(mtcars [, c("mpg", "disp", "hp")])
parcoord(mtcars [, c("mpg", "disp", "hp", "drat")])
parcoord(mtcars [, c("mpg", "disp", "hp", "drat", "wt")])
parcoord(mtcars [, c("mpg", "disp", "hp", "drat", "wt", "qsec")])
parcoord(Cars93 [, c("Weight")])
parcoord(Cars93 [, c("Weight", "Width")])
parcoord(Cars93 [, c("Weight", "MPG.City")])
parcoord(Cars93 [, c("Weight", "MPG.city")])
parcoord(Cars93 [, c("Weight", "MPG.city", "RPM")])
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")])
parcoords(
mtcars
,rownames=T
,dimensions = list(
cyl = list(
title = "cylinder",
tickValues = unique(mtcars$cyl)
)
)
)
parcoord(Cars93, rownames=T, [, c("Weight", "RPM", "MPG.city")])
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], rownames=T)
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = T)
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")])
parcoord(Cars93, var.label = FALSE [, c("Weight", "RPM", "MPG.city")])
parcoord(Cars93, var.label = FALSE [, c("Weight", "RPM", "MPG.city")])
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE)
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE, col = 1 + (0:149)%/%50)
colVect = 1 + (0 : (dim(Weight)[1]-1))
%/% round(dim(Weight)[1] / 3)
colVect = 1 + (0 : (dim(Cars93)[1]-1))
%/% round(dim(Cars93)[1] / 3)
colVect = 1 + (0 : (dim(Cars93)[1]-1)) %/% round(dim(Cars93)[1] / 3)
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE, col = colVect
)
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE, col = colVect)
colVect = 1 + (0 : (dim(Cars93)[21]-1)) %/% round(dim(Cars93)[21] / 3)
colVect = 1 + (0 : (dim(Cars93)[20]-1)) %/% round(dim(Cars93)[20] / 3)
colVect = 1 + (0 : (dim(Cars93)[1]-1)) %/% round(dim(Cars93)[1] / 3)
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE, col = rainbow(4))
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE, col = rainbow(12))
parcoord(Cars93 [, c("Weight", "RPM", "MPG.city")], var.label = TRUE, col = heat.colors(12))
parcoord(Cars93 [, c("Manufacturer", Weight", "RPM", "MPG.city")], var.label = TRUE, col = heat.colors(12))
parcoord(Cars93 [, c("Manufacturer", "Weight", "RPM", "MPG.city")], var.label = TRUE, col = heat.colors(12))
parcoord(Cars93 [, ] col = heat.colors(12))
parcoord(Cars93, col = heat.colors(12))
parcoord(mtcars, col = heat.colors(12))
parcoord(mtcars, col = terrain.colors(12))
parcoord(mtcars, col = terrain.colors(12), var.label = TRUE)
parcoord(mtcars, col = terrain.colors(20), var.label = TRUE)
parcoord(mtcars, col = terrain.colors(40), var.label = TRUE)
parcoord(mtcars, col = terrain.colors(100), var.label = TRUE)
parcoord(mtcars, col = terrain.colors(50), var.label = TRUE)
pairs(~calories+protein+sugars+potassium+carbo,data=UScereal)
parcoord(mtcars [, c("mpg", "disp", "hp", "drat", "wt", "qsec")])
summary(mtcars)
mtcars
install.packages(c("cluster", "foreign", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"))
update.packages()
packageStatus()
packageStatus()
version
packageStatus()
install.packages(c("lattice", "MASS", "Matrix", "mgcv", "survival"))
install.packages(c("foreign", "lattice", "MASS", "Matrix", "mgcv", "survival"))
old.packages()
update.packages()
dir()
shiny::runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("shinydashboard")
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("ggplot2")
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("lubridate")
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("DT")
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("jpeg")
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("leaflet")
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
install.packages("grid")
install.packages("grid")
shiny::runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
shiny::runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
R
version()
runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
installed.packages()
installed.packages()[,1:2]
old.packages()
update.packages(ask = FALSE)
old.packages()
shiny::runApp('Documents/courses/424 sp 2018/Rfor424/evltemps')
setwd(dir)
setwd("Desktop/new public_html/424/evlWeatherForR/")
getwd()
dir()
evl2006 <- read.table(file = "history_2006.tsv", sep = "\t", header = TRUE)
evl2006
str()
str(evl2006)
dim(evl2006)
newDates <- as.Date(evl2006$Date, "%m/%d/%Y")
evl2006$newDate<-newDates
evl2006$Date <- NULL
str(evl2006)
plot(evl2006$newDate, evl2006$S4, xlab = "Month", ylab = "Temperature")
install.packages(“ggplot2”)
install.packages("ggplot2")
library(ggplot2)
noons <- subset(evl2006, Hour == 12)
noons$S2
ggplot(noons, aes(x=newDate, y=noons$S2)) + geom_point(color="blue") +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + geom_line()
ggplot(noons, aes(x=newDate, y=noons$S2)) + geom_point(color="blue") +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(65,90))
ggplot(noons, aes(x=newDate, y=noons$S2)) + geom_point(color="blue") +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(65,90)) + geom_smooth()
ggplot(noons, aes(x=newDate, y=noons$S2)) +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + geom_line() + coord_cartesian(ylim = c(65,90)) + geom_smooth()
ggplot(noons, aes(x=newDate, y=noons$S2)) +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + coord_cartesian(ylim = c(65,90)) + geom_smooth()
ggplot(noons, aes(x=newDate)) +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + coord_cartesian(ylim = c(65,90)) + geom_smooth(aes(y=noons$S2)) + geom_smooth(aes(y=noons$S1)) + geom_smooth(aes(y=noons$S3)) + geom_smooth(aes(y=noons$S4)) + geom_smooth(aes(y=noons$S5)) + geom_smooth(aes(y=noons$S6))+ geom_smooth(aes(y=noons$S7))
ggplot(evl2006, aes(x=newDate)) +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + coord_cartesian(ylim = c(65,85)) + geom_smooth(aes(y=evl2006$S2)) + geom_smooth(aes(y=evl2006$S1)) + geom_smooth(aes(y=evl2006$S3)) + geom_smooth(aes(y=evl2006$S4)) + geom_smooth(aes(y=evl2006$S5)) + geom_smooth(aes(y=evl2006$S6))+ geom_smooth(aes(y=evl2006$S7))
plot(evl2006$newDate, evl2006$S4, xlab = "Month", ylab = "Temperature", ylim=c(65, 90))
plot all temps in room 4 from 2006 using the built in plotting
plot(evl2006$newDate, evl2006$S4, xlab = "Month", ylab = "Temperature")
ggplot(evl2006, aes(x=newDate, y=evl2006$S4)) + geom_point(color="blue") +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F")
ggplot(evl2006, aes(x=newDate)) +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F") + coord_cartesian(ylim = c(65,85)) + geom_smooth(aes(y=evl2006$S2)) + geom_smooth(aes(y=evl2006$S1)) + geom_smooth(aes(y=evl2006$S3)) + geom_smooth(aes(y=evl2006$S4)) + geom_smooth(aes(y=evl2006$S5)) + geom_smooth(aes(y=evl2006$S6))+ geom_smooth(aes(y=evl2006$S7))
ggplot(evl2006, aes(x=newDate, y=evl2006$S4)) + geom_point(color="blue") +  labs(title="Room Temperature in room ???", x="Day", y = "Degrees F")
ggplot(evl2006, aes(x=factor(S4)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
ggplot(noons, aes(x=factor(S6)))  + geom_bar(stat="count", fill="steelblue")
temperatures <- as.data.frame(table(noons[,5]))
temperatures$Var1 <- as.numeric(as.character(temperatures$Var1))
ggplot(temperatures, aes(x=Var1, y=Freq)) + geom_bar(stat="identity", fill="steelblue") +
labs(x="Temperature (F)", y = "Count") + xlim(60,90)
summary(temperatures)
ggplot(temperatures, aes(x = "", y = temperatures[,1])) + geom_boxplot() + labs(y="Temperature (F)", x="") + ylim(55,90)
runApp('~/Documents/courses/424 sp 2018/Rfor424/evltemps')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Create the shiny dashboard
ui <- dashboardPage(
dashboardHeader(title = "CS 424 Spring 2020 Example Dashboard"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
sidebarMenu(
menuItem("", tabName = "cheapBlankSpace", icon = NULL),
menuItem("", tabName = "cheapBlankSpace", icon = NULL),
menuItem("", tabName = "cheapBlankSpace", icon = NULL),
menuItem("EVL Temperatures", icon = icon("bar-chart-o"), tabName = "emptyOne"
)),
sidebarUserPanel("evl",
subtitle = "",
# Image file should be in www/ subdir
image = "https://www.evl.uic.edu/aej/gifs/evl.jpg"
),
selectInput("Year", "Select the year to visualize", years, selected = 2019),
selectInput("Room", "Select the room to visualize", listNamesGood, selected = "Meeting Room")
),
dashboardBody(
fluidRow(
column(2,
fluidRow(
box(title = "Plotting on a jpeg", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("jpeg", height = 300)
)
),
fluidRow(
box(title = "Leaflet Map", solidHeader = TRUE, status = "primary", width = 12,
leafletOutput("leaf", height = 200)
)
)
),
column(8,
fluidRow(
box( title = "Room Temperature Range over a Year", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("hist1", height = 200)
)
),
fluidRow(
box( title = "Room Temperature at Noon over a Year", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("hist2", height = 200)
)
),
fluidRow(
box( title = "Heatmap of Room Temperature over a Year", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("hist0", height = 250)
)
)
),
column(2,
fluidRow(
box(title = "Noon Temps as Box Plot", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("hist4", height = 200)
)
),
fluidRow(
box(title = "Noon Temps as Bar Chart", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("hist3", height = 200)
)
),
fluidRow(
box(title = "Noon Temps as Table", solidHeader = TRUE, status = "primary", width = 12,
dataTableOutput("tab1", height = 200)
)
)
)
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
